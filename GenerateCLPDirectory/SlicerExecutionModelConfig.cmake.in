#
# Typical usage could be something like:
#   find_package(SlicerExecutionModel REQUIRED GenerateCLP)
#   include(${SlicerExecutionModel_USE_FILE})
#   generateclp(...)
##
# When using the components argument, SlicerExecutionModel_USE_* variables are 
# automatically set for the SlicerExecutionModel_USE_FILE to pick up.  
# If one wishes to manually set them, the available ones to set include:
#                    SlicerExecutionModel_USE_GENERATECLP
#                    SlicerExecutionModel_USE_MODULEDESCRIPTIONPARSER
#                    SlicerExecutionModel_USE_TCLAP
#                    SlicerExecutionModel_USE_SERIALIZER

# Check if components where passed to find_package()
if(SlicerExecutionModel_FIND_COMPONENTS)
  foreach(component ${SlicerExecutionModel_FIND_COMPONENTS})
    string(TOUPPER ${component} _COMPONENT)
    set(SlicerExecutionModel_USE_${_COMPONENT} 1)
  endforeach()
endif()

# If no components are passed, let's assume all components built by default are expected to be enabled.
if(NOT SlicerExecutionModel_FIND_COMPONENTS)
  set(SlicerExecutionModel_USE_GENERATECLP 1)
  set(SlicerExecutionModel_USE_MODULEDESCRIPTIONPARSER 1)
  set(SlicerExecutionModel_USE_TCLAP 1)
endif()

# SlicerExecutionModel_USE_SERIALIZER is optional and it must be turned on at
# build time.
if(SlicerExecutionModel_USE_SERIALIZER AND NOT "@SlicerExecutionModel_USE_SERIALIZER@")
  message(SEND_ERROR "The SERIALIZER COMPONENT for SlicerExecutionModel was requested,
  but SlicerExecutionModel was not built with SlicerExecutionModel_USE_SERIALIZER ON.")
endif()
set(SlicerExecutionModel_USE_SERIALIZER "@SlicerExecutionModel_USE_SERIALIZER@")
if(SlicerExecutionModel_USE_SERIALIZER)
  find_package(ParameterSerializer REQUIRED)
endif()

# Set SlicerExecutionModel variables
set(SlicerExecutionModel_INCLUDE_DIRS
  "@SlicerExecutionModel_INCLUDE_DIRS_CONFIG@"
  )
set(SlicerExecutionModel_LIBRARIES
  @SlicerExecutionModel_LIBRARIES_CONFIG@
  )
set(DEFAULT_SEM_TARGET_LIBRARIES
  @DEFAULT_SEM_TARGET_LIBRARIES_CONFIG@
  )
set(SlicerExecutionModel_USE_FILE
  "@SlicerExecutionModel_USE_FILE_CONFIG@"
  )
set(SlicerExecutionModel_CMAKE_DIR ${SlicerExecutionModel_DIR}/CMake)

# If not already defined, set default "output directories" used by SEMMacroBuildCLI.cmake
if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY)
  set(SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY
    "@SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY_CONFIG@"
    )
endif()

if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY)
  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY
    "@SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY_CONFIG@"
    )
endif()

if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY)
  set(SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY
    "@SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY_CONFIG@"
    )
endif()

# If not already defined, set default "install destination" used by SEMMacroBuildCLI.cmake
if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION)
  set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION
    "@SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION_CONFIG@"
    )
endif()

if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION)
  set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION
    "@SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION_CONFIG@"
    )
endif()

if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION)
  set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION
    "@SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION_CONFIG@"
    )
endif()

# If not already defined, set rpath flags used by SEMMacroBuildCLI.cmake
if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS)
  set(SlicerExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS
    "@SlicerExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS@"
    )
endif()

if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS)
  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS
    "@SlicerExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS@"
    )
endif()

# If not already defined, set default library wrapper used by SEMMacroBuildCLI.cmake
if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_WRAPPER_CXX)
  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_WRAPPER_CXX
    "@SlicerExecutionModel_DEFAULT_CLI_LIBRARY_WRAPPER_CXX_CONFIG@"
    )
endif()

# If not already defined, set default "cli targets folder prefix" used by SEMMacroBuildCLI.cmake
if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_TARGETS_FOLDER_PREFIX)
  set(SlicerExecutionModel_DEFAULT_CLI_TARGETS_FOLDER_PREFIX
    "@SlicerExecutionModel_DEFAULT_CLI_TARGETS_FOLDER_PREFIX_CONFIG@"
    )
endif()

# The SlicerExecutionModel targets file.
if(NOT TARGET GenerateCLP AND EXISTS "@SlicerExecutionModel_EXPORT_FILE@")
  include("@SlicerExecutionModel_EXPORT_FILE@")
endif()

# Set *_DIR variable so that find_package() works appropriately
set(ModuleDescriptionParser_DIR ${SlicerExecutionModel_DIR}/ModuleDescriptionParser)
set(GenerateCLP_DIR ${SlicerExecutionModel_DIR}/GenerateCLP)
set(TCLAP_DIR ${SlicerExecutionModel_DIR}/tclap)

#
# Find ModuleDescriptionParser, GenerateCLP and TCLAP so that the associated 
# variables (ModuleDescriptionParser_INCLUDE_DIRS, ...) are exposed.
#
if(SlicerExecutionModel_USE_MODULEDESCRIPTIONPARSER)
  find_package(ModuleDescriptionParser REQUIRED)
endif()

if(SlicerExecutionModel_USE_GENERATECLP)
  find_package(GenerateCLP REQUIRED)
endif()

if(SlicerExecutionModel_USE_TCLAP)
  find_package(TCLAP REQUIRED)
endif()

set(SlicerExecutionModel_LIBRARY_DIRS
  "@SlicerExecutionModel_LIBRARY_DIRS_CONFIG@"
  ${GenerateCLP_LIBRARY_DIRS}
  ${ModuleDescriptionParser_LIBRARY_DIRS}
  ${TCLAP_LIBRARY_DIRS}
  )
